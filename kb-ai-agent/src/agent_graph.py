# src/agent_graph.py
from __future__ import annotations

import os
import json
import tempfile
from pathlib import Path
from typing import Dict, Any, List

from .tools.kb_ingest import ingest_text_blobs
from .tools.kb_search import search_kb
from .tools.coder import propose_code_change
from .tools.jira_client import issue_key_from_url, get_issue  # returns dict
from .tools.gitlab_client import create_branch_commit_push, open_draft_mr


def _issue_to_kb_items(issue: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    Convert a Jira issue payload into KB-ingestible items.
    Each item: {"text": "...", "source": "..."}.
    """
    key = issue["key"]
    source_base = f"jira://{key}"

    title = issue.get("title") or ""
    desc = issue.get("description") or ""
    ac = issue.get("acceptance_criteria") or ""
    status = issue.get("status") or "Unknown"
    assignee = issue.get("assignee") or "Unassigned"
    reporter = issue.get("reporter") or "Unknown"
    raw = json.dumps(issue, ensure_ascii=False)

    items = [
        {
            "text": f"[{key}] {title}\nStatus: {status}\nAssignee: {assignee}\nReporter: {reporter}",
            "source": f"{source_base}#summary",
        },
        {
            "text": f"[{key}] Description:\n{desc}",
            "source": f"{source_base}#description",
        },
        {
            "text": f"[{key}] Acceptance Criteria:\n{ac}" if ac else f"[{key}] Acceptance Criteria:\nN/A",
            "source": f"{source_base}#acceptance_criteria",
        },
        {
            "text": f"[{key}] Raw JSON:\n{raw}",
            "source": f"{source_base}#raw",
        },
    ]
    return items


def jira_to_mr_flow(jira_url: str, repo_url: str, target_branch: str = "main") -> Dict[str, Any]:
    """
    1) Parse & fetch Jira issue
    2) Ingest issue into KB
    3) Search KB for context
    4) Ask coder tool to propose code edits (fallback creates docs/jira/<KEY>.md)
    5) Create branch, commit files, push
    6) Open Draft MR
    """
    # --- 1) Jira ---
    key = issue_key_from_url(jira_url)
    issue = get_issue(key)  # -> {"key","title","description","acceptance_criteria","status","assignee","reporter"}

    # --- 2) Ingest Jira into KB ---
    kb_items = _issue_to_kb_items(issue)
    ingest_text_blobs(kb_items)

    # --- 3) KB search for more context (issue key + title works well) ---
    kb_hits = search_kb(f"{key} {issue.get('title','')}", k=5)

    # --- 4) Propose code change plan ---
    # kb_hits is List[Tuple[doc, meta]] — pass through
    plan = propose_code_change(
        spec=f"{issue.get('title','')}\n\n{issue.get('description','')}",
        kb_snippets=kb_hits
    )
    files = {f["path"]: f["content"] for f in plan.get("files", [])}
    branch = plan.get("branch") or f"auto/{key}"

    # Fallback: ensure we produce at least a safe doc so the MR shows a diff
    if not files:
        doc_path = f"docs/jira/{key}.md"
        safe_doc = [
            f"# {key} — {issue.get('title','')}",
            "",
            f"**Status:** {issue.get('status','N/A')}",
            f"**Assignee:** {issue.get('assignee','N/A')}",
            f"**Reporter:** {issue.get('reporter','N/A')}",
            "",
            "## Description",
            issue.get("description") or "N/A",
            "",
            "## Acceptance Criteria",
            issue.get("acceptance_criteria") or "N/A",
            "",
            "## Notes",
            "Auto-generated by jira2mr.",
        ]
        files = {doc_path: "\n".join(safe_doc)}

    # --- 5) Commit & push ---
    create_branch_commit_push(repo_url, branch, files)

    # --- 6) Draft MR ---
    title = f"{key}: {issue.get('title','')}"
    mr_desc = plan.get("plan", "")
    mr_url = open_draft_mr(branch, title, mr_desc, target_branch=target_branch)

    return {
        "issue": key,
        "branch": branch,
        "target_branch": target_branch,
        "repo": repo_url,
        "files_count": len(files),
        "plan": plan.get("plan", ""),
        "mr_url": mr_url,
    }
